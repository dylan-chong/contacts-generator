//
//  ContentView.swift
//  ios-contact-generator
//
//  Created by Dylan Chong on 23/01/2025.
//

#Preview {
    CreateFakeContactsView()
}

import SwiftUI
import Contacts

import SwiftUI
import Contacts

struct CreateFakeContactsView: View {
    @State var howManyContacts: String = ""
    @State var isError: Bool = false
    @State var isWorking: Bool = false
    @State var isShowingDone: Bool = false

    var body: some View {
        ZStack {
            VStack {
                TextField("Number of contacts to create", text: $howManyContacts)
                    .keyboardType(.numberPad)
                    .border(.black)
                    .padding()
                if isError {
                    Text("Please enter a valid integer.")
                        .foregroundColor(.red)
                }
                if isShowingDone {
                    Text("Successfully created \(howManyContacts) contacts.")
                        .foregroundColor(.green)
                }
                Button {
                    isWorking = true
                    isError = false
                    if let passedInteger = Int(howManyContacts) {
                        requestContactAccess { granted in
                            if granted {
                                Task {
                                    await createContacts(count: passedInteger)
                                    isShowingDone = true
                                    isWorking = false
                                }
                            } else {
                                isError = true
                                isWorking = false
                            }
                        }
                    } else {
                        isError = true
                        isWorking = false
                    }
                } label: {
                    Text("Create Contacts")
                }
                .buttonStyle(.borderedProminent)
                .disabled(isWorking)
            }
            .padding()
        }
    }

    func requestContactAccess(completion: @escaping (Bool) -> Void) {
        let store = CNContactStore()
        let authorizationStatus = CNContactStore.authorizationStatus(for: .contacts)
        
        switch authorizationStatus {
        case .authorized:
            completion(true)
        case .denied, .restricted:
            completion(false)
        case .notDetermined:
            store.requestAccess(for: .contacts) { granted, error in
                completion(granted)
            }
        @unknown default:
            completion(false)
        }
    }

    func createContacts(count: Int) async {
        let store = CNContactStore()
        let saveRequest = CNSaveRequest()

        for (index, contact) in generateRandomContacts(count: count).enumerated() {
            let newContact = CNMutableContact()
            newContact.givenName = contact.firstName + "\(index + 1)"
            newContact.familyName = contact.lastName
            newContact.phoneNumbers = [CNLabeledValue(label: CNLabelPhoneNumberMain, value: CNPhoneNumber(stringValue: contact.phoneNumber))]
            newContact.emailAddresses = [CNLabeledValue(label: CNLabelHome, value: contact.emailAddress as NSString)]
            newContact.organizationName = "Generated by ios-contact-generator" // Adding company name

            saveRequest.add(newContact, toContainerWithIdentifier: nil)
        }

        do {
            try store.execute(saveRequest)
        } catch {
            print("Error saving contacts: \(error)")
        }
    }

    struct RandomContact {
        let firstName: String
        let lastName: String
        let phoneNumber: String
        let emailAddress: String
    }

    func generateRandomContacts(count: Int) -> [RandomContact] {
        var contacts: [RandomContact] = []
        
        let firstNames = ["John", "Jane", "Alice", "Bob", "Charlie", "Diana", "Eve", "Frank"]
        
        for _ in 0..<count {
            let firstName = firstNames.randomElement() ?? "FirstName"
            let lastName = generateRandomString(length: 12)
            let phoneNumber = generateRandomPhoneNumber()
            let emailAddress = "\(firstName.lowercased()).\(lastName.lowercased())@example.com"
            
            let contact = RandomContact(firstName: firstName, lastName: lastName, phoneNumber: phoneNumber, emailAddress: emailAddress)
            contacts.append(contact)
        }
        
        return contacts
    }
    
    func generateRandomString(length: Int) -> String {
        let characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        var randomString = ""

        for _ in 0..<length {
            let randomIndex = Int(arc4random_uniform(UInt32(characters.count)))
            let randomCharacter = characters[characters.index(characters.startIndex, offsetBy: randomIndex)]
            randomString.append(randomCharacter)
        }

        return randomString
    }


    func generateRandomPhoneNumber() -> String {
        let digits = (0...9).map { String($0) }
        var phoneNumber = "+"
        for _ in 0..<11 {
            phoneNumber += digits.randomElement() ?? "0"
        }
        return phoneNumber
    }
}

struct ContentView: View {
    var body: some View {
        CreateFakeContactsView()
    }
}
